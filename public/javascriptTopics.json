{
    "oops": [
      {
        "topicId": 1,
        "heading": "Closures",
        "body": [
          "Closure is  a function that uses variables from the outer lexical scope..",
          "A closure gives you access to an outer function's scope from an inner function.",
          "JavaScript only had two kinds of scopes: function scope and global scope.",
          "Global variables can be made local (private) with closures."
        ],
        "example": "function greet(name) {\n  function displayName() {\n  console.log('Hi' + ' ' + name);\n   }\n  displayName();\ngreet('John');"
      },
      {
        "topicId": 2,
        "heading": "async/await function",
        "body": [
          "async makes a function return a Promise.",
          "await makes a function wait for a Promise.",
          "The await keyword can only be used inside an async function."
        ],
        "example": ""
      },
      {
        "topicId": 3,
        "heading": "Inheritance",
        "body": [
          "Inheritance is the ability to access or derive one class from another existing class.",
          "The Base class is also called a parent or superclass & the derived class is called a child class or subclass.",
          "Inheritance is achieved by using the `extends` keyword.",
          "It helps in code reuse and more simple implementation.",
          "In JavaScript, objects also inherit methods from other objects."
        ],
        "example": ""
      },
      {
        "topicId": 4,
        "heading": "Types of Inheritance",
        "body": [
          "Prototypal Inheritance",
          "Pseudo-classical Inheritance",
          "Functional Inheritance"
        ]
      },
      {
        "topicId": 5,
        "heading": "Prototypal Inheritance",
        "body": [
          " This type of inheritance in JavaScript adds new properties and methods to the existing object.",
          "Prototypal inheritance in JavaScript makes use of prototype object that is object.prototype.",
          "It is a method through which an object can inherit the properties as well as the methods of another object.",
          "Initially, in order to get and set the [[Prototype]] of the object we used Object.getPrototypeOf and Object.setPrototypeOf. But now we can make use of __proto__."
        ],
        "example": ""
      },
      {
        "topicId": 6,
        "heading": "Pseudo-classical Inheritance",
        "body": [
          "Pseudoclassical inheritance uses “constructor function” and the “new” operator to create objects, and uses the “prototype” property to build the inheritance chain.",
          "A constructor function is given a “prototype” property; this property is inherited by all instances.",
          "If you are programming with ES6, then this type of inheritance in JavaScript is not supported."
        ],
        "example": ""
      },
      {
        "topicId": 7,
        "heading": "Functional Inheritance",
        "body": [
          "Functional inheritance is the process of inheriting features by applying an augmenting function to an object instance.",
          "The function supplies a closure scope which you can use to keep some data private.",
          "The augmenting function uses dynamic object extension to extend the object instance with new properties and methods."
        ],
        "example": "// Base object constructor function \n function Animal(data) { \n var that = {}; // Create an empty object \n that.name = data.name; // Add it a 'name' property \n return that; // Return the object \n }; \n // Create achild object, inheriting from the base Animal \n function Cat(data) { \n // Create the Animal object \n var that = Animal(data); \n // Extend base object \n that.sayHello = function() { \n return 'Hello ' + that.name; \n }; \n return that; \n }; \n // Usage \n var myCat = Cat({ name: 'Ayusha' }); \n console.log(myCat.sayHello());"
      },
      {
        "topicId": 10,
        "heading": "Callback",
        "body": [
          "In JavaScript, you can also pass a function as an argument to a function. This function that is passed as an argument inside of another function is called a callback function. ",
          "These functions are great for handling asynchronous operations.",
          "The consumer of a callback-based API writes a function that is passed into the API.",
          "There are two ways in which the callback may be called: synchronous and asynchronous.",
          "Synchronous callbacks are called immediately after the invocation of the outer function, with no intervening asynchronous tasks, while asynchronous callbacks are called at some point later, while after an asynchronous operation has completed."
        ],
        "example": "function hello(name, callback) \n { \n console.log('My name is '+ name) \n callback(); \n } \n function greet() \n { \n console.log('Welcome to the meeting') \n } \n hello('Ayusha',greet);"
      },
      {
        "topicId": 11,
        "heading": "Promise",
        "body": [
          "A Promise is a proxy for a value not necessarily known when the promise is created.",
          "It allows you to associate handlers with an asynchronous action's eventual success value or failure reason.",
          "This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.",
          "A Promise is in one of these states:",
          "pending: initial state, neither fulfilled nor rejected.",
          "fulfilled: meaning that the operation was completed successfully.",
          "rejected: meaning that the operation failed."
        ],
        "example":"const count = true; \n let countValue = new Promise(function (resolve, reject) { \n if (count) { \n resolve('There is a count value.') \n  } else { \n reject('There is no count value'); \n } \n }); \n console.log(countValue);"
      },
      {
        "topicId": 12,
        "heading": "Promise concurrency",
        "body": [
          "The Promise class offers four static methods to facilitate async task concurrency",
          "Promise.all(): Fulfills when all of the promises fulfill; rejects when any of the promises rejects.",
          "Promise.allSettled(): Fulfills when all promises settle.",
          "Promise.any(): Fulfills when any of the promises fulfills; rejects when all of the promises reject.",
          "Promise.race(): Settles when any of the promises settles. In other words, fulfills when any of the promises fulfills; rejects when any of the promises rejects."
        ],
        "example":""
      },
      {
        "topicId": 13,
        "heading": "Hoisting",
        "body": [
          "Hoisting is a concept that enables us to extract values of variables and functions even before initializing/assigning value without getting errors and this happens during the 1st phase (memory creation phase) of the Execution Context.",
          "Hoisting is JavaScript's default behavior of moving declarations to the top.",
          "JavaScript only hoists declarations, not initializations.",
          "It allows us to call functions before even writing them in our code.",
          "Var is hoisted without any error.",
          "If let is hoisted, we get 'Reference Error'",
          "If const is hoisted, we get 'Syntax Error'"
        ],
        "example":"var coffeeBlend; \n console.log(coffeeBlend); \n coffeeBlend = 'Dark Roast'; \n \n // Output: undefined \n brewCoffee(); \n function brewCoffee() { \n console.log('Brewing a fresh pot of coffee!'); \n } \n \n // Output: 'Brewing a fresh pot of coffee!'"
      },
      {
        "topicId": 14,
        "heading": "var vs let vs const",
        "body": [
          "Var was introduced in original version but let and const is introduced in ES6 features.",
          "Var has functional scope but let and const has block scope.",
          "Var allows hoisting but let and const does not allow hoisting.",
          "Value can be reassigned in var and let but not in const",
          "Var variables can be redeclarated but let and const variables cannot be redeclarated.",
          "Var variables can be accessed without initializing but let and const variable cannot be accessed without intializing."

        ],
        "example":""
      },
      {
        "topicId": 15,
        "heading": "Data Types of javascript",
        "body": [
          "JavaScript is a dynamic type language, means you don't need to specify type of the variable because it is dynamically used by JavaScript engine.",
          "JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript:",
          "Primitive data type",
          "Non-primitive (reference) data type"

        ],
        "example":""
      },
      {
        "topicId": 16,
        "heading": "Primitive data type",
        "body": [
          "here are five types of primitive data types in JavaScript:",
          "String: represents sequence of characters e.g. 'hello'",
          "Number: represents numeric values e.g. 100",
          "Boolean: represents boolean value either false or true",
          "Undefined: represents undefined value",
          "Null: represents null i.e. no value at all"

        ],
        "example":""
      },
      {
        "topicId": 17,
        "heading": "Non-Primitive data type",
        "body": [
          "The non-primitive data types are as follows:",
          "Object: represents instance through which we can access members",
          "Array: represents group of similar values",
          "RegExp: represents regular  expression"
        ],
        "example":""
      },
      {
        "topicId": 18,
        "heading": "High-Order Functions",
        "body": [
          "Higher order functions are functions that take one or more functions as arguments, or return a function as their result.",
          "JavaScript has a few built-in higher-order functions:",
          "JavaScript Reduce(): Reduce is a powerful method that takes an array of elements to reduce them by applying a function to each element. It accumulates all the elements and returns a single value.",
          "JavaScript Map(): The Map function allows you to modify each element of an array returning a new identical array. You can also accomplish this by using for loops or nesting. Map() provides a more elegant way to do it following the functional programming rules.",
          "JavaScript Filter(): This function can filter an array according to a particular condition and returns a new array with the elements that passed the condition. Remember that the original stays as is since it returns a new array.",
          "JavaScript Sort(): The sort() function allows you to overwrite an array by sorting its elements. If it's an array of integers, it'll sort it in ascending order by default. On the flip side, if it's an array of strings, it will sort it alphabetically. What if you don't want to sort an array in alphabetical or ascending order, you may ask? You can easily sort arrays in non-alphabetical or descending order by combining sort() with reverse(). So after sorting the list, you have to do listname.reverse() to reverse its order."
        ],
        "example":"// Callback function, passed as a parameter in the higher order function \n function callbackFunction(){ \n console.log('I am  a callback function'); \n } \n \n // higher order function \n function higherOrderFunction(func){ \n console.log('I am higher order function') \n func() \n } \n higherOrderFunction(callbackFunction);"
      },
      {
        "topicId": 19,
        "heading": "IIFE (Immediately Invoked Function Expression)",
        "body": [
          "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.",
          "It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:",
          "The first is the anonymous function with lexical scope enclosed within the Grouping Operator (). This prevents accessing variables within the IIFE idiom as well as polluting the global scope.",
          "The second part creates the immediately invoked function expression () through which the JavaScript engine will directly interpret the function."
        ],
        "example":"(function sum(){ \n let length=2; \n let breadth=6; \n let height=3; \n let cube=length*breadth*height; \n console.log(cube); \n })();"
      },
      {
        "topicId": 20,
        "heading": "Currying",
        "body": [
          "Currying in JavaScript transforms a function with multiple arguments into a nested series of functions, each taking a single argument.",
          "Currying helps you avoid passing the same variable multiple times, and it helps you create a higher order function."
        ],
        "example":"function sum(length){ \n return function (breadth){ \n return function (height){ \n return length*breadth*height; \n } \n } \n } \n console.log(sum(2)(3)(6));"
      }

    ]
  }